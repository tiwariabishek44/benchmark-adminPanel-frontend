import React, { useState } from 'react';
import VerificationMessage from './verificationMessage/VerificationMeasage'; // Import the VerificationMessage component
import './TeacherList.css';

const TeacherList = () => {
  const [filterOption, setFilterOption] = useState("verified");
  const [verificationMessage, setVerificationMessage] = useState("");

const teacherList = [
  {
    name: "Ms. Jane Doe",
    phoneNumber: "(555) 555-7777",
    email: "jane.doe@example.school.com",
    isVerified: true
  },
  {
    name: "Mr. John Smith",
    phoneNumber: "(555) 555-8888",
    email: "john.smith@example.school.com",
    isVerified: false
  },
  {
    name: "Ms. Jane Doe",
    phoneNumber: "(555) 555-7777",
    email: "jane.doe@example.school.com",
    isVerified: true
  },
  {
    name: "Mr. John Smith",
    phoneNumber: "(555) 555-8888",
    email: "john.smith@example.school.com",
    isVerified: false
  },
  {
    name: "Ms. Jane Doe",
    phoneNumber: "(555) 555-7777",
    email: "jane.doe@example.school.com",
    isVerified: true
  },
  {
    name: "Mr. John Smith",
    phoneNumber: "(555) 555-8888",
    email: "john.smith@example.school.com",
    isVerified: false
  },
  {
    name: "Ms. Jane Doe",
    phoneNumber: "(555) 555-7777",
    email: "jane.doe@example.school.com",
    isVerified: true
  },
  {
    name: "Mr. John Smith",
    phoneNumber: "(555) 555-8888",
    email: "john.smith@example.school.com",
    isVerified: false
  },
  {
    name: "Ms. Jane Doe",
    phoneNumber: "(555) 555-7777",
    email: "jane.doe@example.school.com",
    isVerified: true
  },
  {
    name: "Mr. John Smith",
    phoneNumber: "(555) 555-8888",
    email: "john.smith@example.school.com",
    isVerified: false
  },
  {
    name: "Ms. Jane Doe",
    phoneNumber: "(555) 555-7777",
    email: "jane.doe@example.school.com",
    isVerified: true
  },
  {
    name: "Mr. John Smith",
    phoneNumber: "(555) 555-8888",
    email: "john.smith@example.school.com",
    isVerified: false
  },
  {
    name: "Ms. Jane Doe",
    phoneNumber: "(555) 555-7777",
    email: "jane.doe@example.school.com",
    isVerified: true
  },
  {
    name: "Mr. John Smith",
    phoneNumber: "(555) 555-8888",
    email: "john.smith@example.school.com",
    isVerified: false
  },
  {
    name: "Ms. Sarah Jones",
    phoneNumber: "(555) 555-9999",
    email: "sarah.jones@example.school.com",
    isVerified: true
  },
  {
    name: "Mr. David Lee",
    phoneNumber: "(555) 555-0000",
    email: "david.lee@example.school.com",
    isVerified: true
  },
  {
    name: "Ms. Emily Brown",
    phoneNumber: "(555) 555-1111",
    email: "emily.brown@example.school.com",
    isVerified: false
  },
  {
    name: "Mr. William Johnson",
    phoneNumber: "(555) 555-2222",
    email: "william.johnson@example.school.com",
    isVerified: true
  },
  {
    name: "Ms. Alice Garcia",
    phoneNumber: "(555) 555-3333",
    email: "alice.garcia@example.school.com",
    isVerified: false
  },
  {
    name: "Mr. Michael Hernandez",
    phoneNumber: "(555) 555-4444",
    email: "michael.hernandez@example.school.com",
    isVerified: true
  },
  {
    name: "Ms. Christina Lopez",
    phoneNumber: "(555) 555-5555",
    email: "christina.lopez@example.school.com",
    isVerified: true
  },
  {
    name: "Mr. Robert Chen",
    phoneNumber: "(555) 555-6666",
    email: "robert.chen@example.school.com",
    isVerified: false
  }
];

  const handleVerifyTeacher = (index) => {
    const verifiedTeacher = teacherList[index];
    setVerificationMessage(`${verifiedTeacher.name} has been verified.`);
    setTimeout(() => {
      setVerificationMessage("");
    }, 3000);
  };

  const filteredTeacherList = teacherList.filter(teacher => {
    if (filterOption === "verified") {
      return teacher.isVerified;
    } else if (filterOption === "unverified") {
      return !teacher.isVerified;
    }
    return true;
  });

  return (
    <div className="teacherListContainer">
      <h2 className="header">Teacher List</h2>
      <div className="filterContainer">
        <label className="filterLabel">Filter by Verification Status:</label>
        <select
          className="filterSelect"
          value={filterOption}
          onChange={(e) => setFilterOption(e.target.value)}
        >
          <option value="all">All</option>
          <option value="verified">Verified</option>
          <option value="unverified">Unverified</option>
        </select>
      </div>
      {verificationMessage && <VerificationMessage message={verificationMessage} className="verifyButton" />}
      <div className="tableWrapper">
        <table className="teacherTable">
          <thead>
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Phone Number</th>
              <th>Verification Status</th>
              {filterOption === "unverified" && <th>Action</th>}
            </tr>
          </thead>
        </table>
        <div className="tableBodyWrapper">
          <table className="teacherTable">
            <tbody>
              {filteredTeacherList.map((teacher, index) => (
                <tr key={index}>
                  <td>{teacher.name}</td>
                  <td>{teacher.email}</td>
                  <td>{teacher.phoneNumber}</td>
                  <td>{teacher.isVerified ? 'Verified' : 'Not Verified'}</td>
                  {filterOption === "unverified" && (
                    <td>
                      <button className="verifyButton" onClick={() => handleVerifyTeacher(index)}>Verify</button>
                    </td>
                  )}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
}

export default TeacherList;





/* TeacherList.css */

.teacherListContainer {
  padding: 20px;
  width: 80%;
  background-color: #f9f9f9; /* Light background color */
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.header {
  text-align: center;
  margin-bottom: 20px;
  font-size: 36px; /* Larger font size */
  font-weight: bold;
  color: #333; /* Darker text color */
}

.filterContainer {
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 20px;
  background-color: #fff; /* White background */
  padding: 10px;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.filterLabel {
  margin-right: 10px;
  font-size: 18px;
  color: #555; /* Slightly darker text color */
}

.filterSelect {
  padding: 8px 16px;
  border-radius: 5px;
  border: 1px solid #ccc; /* Light border */
  background-color: #fff;
  font-size: 16px;
  color: #333;
  transition: border-color 0.3s ease;
}

.filterSelect:hover,
.filterSelect:focus {
  border-color: #888; /* Darker border on hover/focus */
}

.tableWrapper {
  position: relative;
  height: 700px; /* Adjust the height as needed */
  overflow-y: auto; /* Enable vertical scrolling */
  padding: 10px;
}

.tableBodyWrapper {
  overflow: hidden;
}

.teacherTable {
  width: 100%;
  border-collapse: collapse;
}

.teacherTable th,
.teacherTable td {
  padding: 15px;
  border-bottom: 1px solid #ddd; /* Lighter border */
  text-align: left;
  font-size: 16px;
}

.teacherTable th {
  background-color: #2ecc71;
  color: #fff;
  font-weight: bold;
  text-transform: uppercase;
}

.teacherTable tbody tr:nth-child(even) {
  background-color: #f2f2f2; /* Alternate background color */
}

.teacherTable tbody tr:hover {
  background-color: #e5e5e5; /* Hover background color */
}

.verifyButton {
  padding: 8px 16px;
  border: none;
  border-radius: 5px;
  background-color: #4caf50;
  color: #fff;
  font-size: 14px; /* Smaller font size */
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.verifyButton:hover {
  background-color: #45a049;
}
